/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |     |  1  |  2  |  3  |  4  |  5  |                 |  6  |  7  |  8   |  9  |  0  |     |
// |     |  Q  |  W  |  F  |  P  |  B  |                 |  J  |  L  |  U   |  Z  |  ;  |     |
// |     |  A  |  R  |  S  |  T  |  G  |                 |  M  |  N  |  E   |  I  |  O  |     |
// |     |  Y  |  X  |  C  |  D  |  V  |     |     |     |  K  |  H  |  ,   |  .  |  /  |     |
//             | CTL | ALT | TAB | SPC | SFT |     | CTL | BSP | ENT | RALT | GUI |
            bindings = <
&none  &kp N1     &kp N2     &kp N3      &kp N4      &kp N5                           &kp N6    &kp N7      &kp N8      &kp N9     &kp N0     &none
&none  &kp Q      &kp W      &kp F       &kp P       &kp B                            &kp J     &kp L       &kp U       &kp Z      &kp SEMI   &none
&none  &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T &kp G                            &kp M     &hm LSHFT N &hm LCTRL E &hm RALT I &hm LGUI O &none
&none  &kp Y      &kp X      &kp C       &kp D       &kp V       &none      &none     &kp K     &kp H       &kp COMMA   &kp DOT    &kp FSLH   &none
                  &kp LCTRL  &kp LALT    &kp TAB     &lt 2 SPACE &kp LSHFT  &kp LCTRL &kp BSPC  &lt 1 RET   &kp RALT    &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |                 |     |      |     |     |     |     |
// |     |  `  |  #  |  [  |  ]  |  $  |                 |  6  |  '   |  "  |  \  |  €  |     |
// |     | ESC |  +  |  (  |  )  |  @  |                 |  |  |  -   |  =  |  _  |     |     |
// |     | TAB |  °  |  {  |  }  |  ~  |     |     |     |  &  |  !   |  *  |  %  |  ^  |     |
//             |     |     |     |     |     |     |     |     |      |     |     |
            bindings = <
&trans  &trans    &trans           &trans    &trans    &trans                     &trans    &trans    &trans    &trans    &trans     &trans
&trans  &kp GRAVE &kp HASH         &kp LBKT  &kp RBKT  &kp DLLR                   &kp N6    &kp SQT   &kp DQT   &kp BSLH  &kp RA(N5) &trans
&trans  &kp ESC   &kp PLUS         &kp LPAR  &kp RPAR  &kp AT                     &kp PIPE  &kp MINUS &kp EQUAL &kp UNDER &trans     &trans
&trans  &kp TAB   &kp LS(RA(SEMI)) &kp LBRC  &kp RBRC  &kp TILDE  &trans   &trans &kp AMPS  &kp EXCL  &kp STAR  &kp PRCT  &kp CARET  &trans
                  &trans           &trans    &trans    &trans     &trans   &trans &trans    &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |                |     |     |     |     |     |     |
// |     |     | WOR |     |     | WOB |                |  v  |  <  |  1  |  2  |  3  |     |
// |     | ESC |     | PGU | BSW | DEW |                |     |  0  |  4  |  5  |  6  |     |
// |     | TAB | HOM | PGD | END | DEL |      |  |      |  ^  |  >  |  7  |  8  |  9  |     |
//             |     |     |     |     |      |  |      |     |     |     |     |
            bindings = <
&trans  &trans   &trans       &trans     &trans    &trans                    &trans    &trans    &trans  &trans &trans  &trans
&trans  &trans   &kp LC(LEFT) &trans     &trans    &kp LC(RIGHT)             &kp DOWN  &kp LEFT  &kp N1  &kp N2 &kp N0  &trans
&trans  &kp ESC  &trans       &kp PG_UP  &kp LC(W) &kp LC(DEL)               &trans    &kp N0    &kp N4  &kp N5 &kp N6  &trans
&trans  &kp TAB  &kp HOME     &kp PG_DN  &kp END   &kp DEL   &trans  &trans  &kp UP    &kp RIGHT &kp N7  &kp N8 &kp N9  &trans
                 &trans       &trans     &trans    &trans    &trans  &trans  &trans    &trans    &trans  &trans

/* original layer */
/* // ------------------------------------------------------------------------------------------------------------ */
/* // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       | */
/* // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       | */
/* // |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC | */
/* // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       | */
/* //              |      |       |       |      |      |  |      |      |      |       |      | */
/*             bindings = < */
/* &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4             &trans    &trans    &trans   &trans    &trans  &trans */
/* &trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                   &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans */
/* &trans     &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                 &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC */
/* &trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans  &trans   &trans  &trans    &trans    &trans   &trans    &trans  &trans */
/*                         &trans       &trans       &trans       &trans  &trans   &trans  &trans    &trans    &trans   &trans */
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
// ------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |                |     |     |     |     |     |     |
// |     | F1  | F2  | F3  | F4  | F5  |                | F6  | F7  | F8  | F9  | F10 |     |
// |     | F11 |     |     |     |     |                |     |     |     |     | F12 |     |
// |     |     |     |     |     |     |      |  |      |     |     |     |     |     |     |
//             |     |     |     |     |      |  |      |     |     |     |     |
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5                  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &trans
&trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
